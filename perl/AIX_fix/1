#!/usr/bin/perl 
#===============================================================================
#
#         FILE: AixConfig.pl
#
#        USAGE: ./AixConfig.pl  
#
#  DESCRIPTION: 
#
#      OPTIONS: ---
# REQUIREMENTS: ---
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: Ravi Prasad (), ravi_prasad@symantec.com
# ORGANIZATION: Symantec
#      VERSION: 1.0
#      CREATED: 08/12/2013 01:48:23 PM
#     REVISION: ---
#===============================================================================

use strict;
use warnings;
use utf8;

my ($user,$count,$filePath,$i,$j);
my (@devArray);
my (@sourceDevice, @targetDevice);


#===  FUNCTION  ================================================================
#         NAME: ReadTempSourceTargetMappedFile
#      PURPOSE: 
#   PARAMETERS: NA
#      RETURNS: NA
#  DESCRIPTION: #Take the temporary source target mapping file as imput from user.
#				Temporary file that contains only the source and target device IDs
#				separated by a space. (Only one source-target pair can exist in a temporary
#				file
#				For example, if the source (STD) device ID is 0050 and the target (BCV) device
#				ID is 0060, the temporary file should contain the following:
#				0050 0060
#       THROWS: no exceptions
#     COMMENTS: none
#     SEE ALSO: n/a
#===============================================================================
sub ReadTempSourceTargetMappedFile {
	print "\nEnter the no of Temprory Source target mapped file:";
	chomp($count = <>);
	
	for ($i = 1; $i <= $count; $i++) {
	     print ("Enter $i File Full Path\n");
	     chomp($filePath = <>);
	     unless (-e $filePath){
			die("$filePath Doesn't Exists\n");
	     } 
	     open INPUT_FILE, "$filePath"  || die "Can't open $filePath: $!\n";
	     while (<INPUT_FILE>) {
            next if ($_ eq "");
	        push(@devArray, $_);
	     }
	     close (INPUT_FILE);
	}
	#print @devArray;

} ## --- end sub ReadTempSourceTargetMappedFile

#===  FUNCTION  ==============================================================
#         NAME: GetSourceAndTagetDevice
#      PURPOSE: To parse the source target mapping file e.g mirror1,mirror2
#   PARAMETERS: file hadles
#      RETURNS: NA
#  DESCRIPTION: ????
#       THROWS: no exceptions
#     COMMENTS: none
#     SEE ALSO: n/a
#===============================================================================
sub GetSourceAndTagetDevice {
    my (@temp) = @_;
    my (@array);

    for($i=0;$i < @temp; $i++){
      chomp($temp[$i]);
      @array = split(/\s+/, $temp[$i]);
      if(!grep(/$array[0]/, @sourceDevice)){
        push(@sourceDevice, $array[0]);
      }
      if(!grep(/$array[1]/, @targetDevice)){
        push(@targetDevice, $array[1]);
      }
      
  }
    print "\nSource Array elements\n";	
    print join("\n",@sourceDevice);
    print "\nTarget Array elements\n";	
    print join("\n",@targetDevice);
    print "\n";
} ## --- end sub GetSourceAndTagetDevice


#===  FUNCTION  ================================================================
#         NAME: FormSympdListCommand
#      PURPOSE: 
#   PARAMETERS: ????
#      RETURNS: ????
#  DESCRIPTION: ????
#       THROWS: no exceptions
#     COMMENTS: none
#     SEE ALSO: n/a
#===============================================================================
sub FormSympdListCommand {
    my ($command,$symcliPath,$args,$ele);
	my (@arr1, @arr2);
    	
	$command ="";
	$symcliPath="/opt/emc/SYMCLI/V7.1.0/bin/sympd";
        print"-----------------------------------------------------------------\n";
	print "Enter the sympd path::<Default /opt/emc/SYMCLI/V7.1.0/bin/sympd>";
	chomp($symcliPath = <>);
	unless (-e $symcliPath){
	  die("$symcliPath oesn't Exists\n");
	} 
    
	$command = $command .$symcliPath;
	
	$args = "";
	$command = $command . " list" . "|" . "egrep ";
	$args = $args . "\'";
	foreach $ele (@targetDevice){
	  $args = $args .$ele."|";
	}
	
	$args = $args . "\'";
        $command = $command . $args;

	return $command;
} ## --- end sub FormSympdListCommand


#===  FUNCTION  ================================================================
#         NAME: GetOSDeviceForSoureceAndTarget
#      PURPOSE: Get the corresponding "/dev/hdisk" device list of the source LUN 
#               and target LUNs masked on the host
#               e.g /dev/hdisk26          2069
#					/dev/hdisk38          206A
#					/dev/hdisk39          206B
#					/dev/hdisk40          206C
#					/dev/hdisk41          206D
#					/dev/hdisk42          206E
#					/dev/hdisk43          206F
#					/dev/hdisk44          2070
#					/dev/hdisk50          2071
# 
#   PARAMETERS: NA
#      RETURNS: NA
#       THROWS: no exceptions
#     COMMENTS: none
#     SEE ALSO: n/a
#===============================================================================
sub GetOSDeviceForSoureceAndTarget {
    my ($sympdListCommand,$user);
    $sympdListCommand = FormSympdListCommand();

    print "sympd list command:: \n";
    print "$sympdListCommand\n";
    print"\n Will you like to run sympd list command[y|n]:";
    chomp($user = <>);
    if ($user !~ /y|Y/){
        die("Bye..............\n");
    }

  
    
} ## --- end sub GetOSDeviceForSoureceAndTarget


#-------------------------------------------------------------------------------
#                      MAIN PROGRAM STARTS  
#-------------------------------------------------------------------------------
print "--------------------------------------------------------------\n";
print "                        Welcome                               \n";
print "This script will try to fix the ODM corruption on the AIX host.\n";
print "You need to be root user to run this script.                   \n";
print "-------------------------------------------------------------\n\n";
print "Ary you a root user [y/n]:";


chomp($user = <>);
if ($user !~ /y|Y/){
   die("please run the script with root user\n");
}


#-------------------------------------------------------------------------------
ReadTempSourceTargetMappedFile();
GetSourceAndTagetDevice(@devArray);

print "--------------------------------------------------------------\n";
print "Confirm the Source and Target device list Shown Above[y/n]:";

chomp($user = <>);
if ($user !~ /y|Y/){
   die("Please verify the Source and Target device with the Temp files\n");
}

GetOSDeviceForSoureceAndTarget();
